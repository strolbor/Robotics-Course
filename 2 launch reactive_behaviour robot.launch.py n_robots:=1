File: [1mREADME.md[0m
[38;2;253;151;31m#[0m[38;2;253;151;31m [0m[38;2;253;151;31mTutorial Workspace for Introduction to Robotics[0m

[38;2;255;255;255mIn this workpsace we will create packages for the programming assignments.[0m
[38;2;255;255;255mYou can start working on the first assignment immediatly.[0m

[38;2;253;151;31m##[0m[38;2;253;151;31m [0m[38;2;253;151;31mAssignment 1: Turtlesim[0m

[38;2;255;255;255mWe will start by using the turtlesim simulation. You can find a lot of documentation for the tur[0m
[38;2;255;255;255mtlesim online, make sure that you read documentation for ros2 (version humble).[0m
[38;2;255;255;255mYour task in this assignment is to enhance a 'watchdog' node, which intecepts and changes the in[0m
[38;2;255;255;255mputs given by the user.[0m

[38;2;255;255;255mThe goal of this assignment is that you familiarize with the ros2 ecosystem:[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m [0m[38;2;255;255;255mlaunch a collection of nodes[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m start individual nodes[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m visualize topics and nodes using [0m[38;2;236;53;51m`[0m[38;2;236;53;51mrqt[0m[38;2;236;53;51m`[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m see what messages are sent using [0m[38;2;236;53;51m`[0m[38;2;236;53;51mrqt[0m[38;2;236;53;51m`[0m[38;2;255;255;255m and [0m[38;2;236;53;51m`[0m[38;2;236;53;51mros2 topic[0m[38;2;236;53;51m`[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m modify existing code and see the effect of your changes[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m learn to understand errors in your own code[0m

[38;2;255;255;255mTo start you can install the workspace using [0m[38;2;236;53;51m`[0m[38;2;236;53;51mgit clone[0m[38;2;236;53;51m`[0m[38;2;255;255;255m.[0m
[38;2;255;255;255mBuild the workspace with the command [0m[38;2;236;53;51m`[0m[38;2;236;53;51mcolcon build[0m[38;2;236;53;51m`[0m[38;2;255;255;255m (from the new directory you just downloaded)[0m
[38;2;255;255;255m. Now you have to 'source' the workspace [0m[38;2;236;53;51m`[0m[38;2;236;53;51msource install/setup.bash[0m[38;2;236;53;51m`[0m[38;2;255;255;255m to use it. You can also add[0m
[38;2;255;255;255m this to your .bashrc file, so you do not have to do this every time you open a new terminal.[0m

[38;2;255;255;255mStart the package for assignment one in the following way:[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m [0m[38;2;236;53;51m`[0m[38;2;236;53;51mros2 launch watchdog watchdog.launch.py[0m[38;2;236;53;51m`[0m[38;2;255;255;255m will start the turtlesim and the watchdog node[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m [0m[38;2;236;53;51m`[0m[38;2;236;53;51mros2 run turtlesim turtle_teleop_key[0m[38;2;236;53;51m`[0m[38;2;255;255;255m starts the teleoperation node - this lets you steer the[0m
[38;2;255;255;255m turtle[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m Use the arrow keys to turn the turtle (the keys GVBR etc. use another mechanism that contr[0m
[38;2;255;255;255mols the turtle which bypasses the watchdog node)[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m Now you can inspect the current behaviour of the system with [0m[38;2;236;53;51m`[0m[38;2;236;53;51mrqt[0m[38;2;236;53;51m`[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m We suggest two plugins that you can enable: [0m[38;2;228;46;112m*[0m[38;2;228;46;112mintrospection - node graph[0m[38;2;228;46;112m*[0m[38;2;255;255;255m and [0m[38;2;228;46;112m*[0m[38;2;228;46;112mtopics - top[0m
[38;2;228;46;112mic monitor[0m[38;2;228;46;112m*[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m You can see that the teleop node directly steers the turtle - this is not what we want[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m You can redirect the output of the teleop node to the input topic for the watchdog node to[0m
[38;2;255;255;255mpic: [0m[38;2;236;53;51m`[0m[38;2;236;53;51mros2 run turtlesim turtle_teleop_key --ros-args --remap turtle1/cmd_vel:=turtle1/input_cmd[0m
[38;2;236;53;51m`[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m Check the changes in the node graph (the teleop node should now send its messages to the t[0m
[38;2;255;255;255mopic 'turtle1/input_cmd' which is subscribed by the watchdog)[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m Now the turtle should move backwards[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m When the behaviour of the turtle is right, pay attention to the controller node[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m This node publishes a start and a stop message[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m Modify the behaviour of the watchdog, so the turtle is only able to turn before the start [0m
[38;2;255;255;255mcommand is sent and stopped completly after the stop command is sent[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m In order to create the desired behaviour you have to set certain components of the 'cmd_ve[0m
[38;2;255;255;255ml' topic to zero[0m

[1;38;2;255;255;255m---[0m
[38;2;255;255;255mStarten Sie das Paket f√ºr Aufgabe eins auf folgende Weise:[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m [0m[38;2;236;53;51m`[0m[38;2;236;53;51mros2 launch watchdog watchdog.launch.py[0m[38;2;236;53;51m`[0m[38;2;255;255;255m startet den Turtlesim und den Watchdog-Knoten[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m [0m[38;2;236;53;51m`[0m[38;2;236;53;51mros2 run turtlesim turtle_teleop_key[0m[38;2;236;53;51m`[0m[38;2;255;255;255m startet den Teleoperationsknoten - damit kannst du die [0m
[38;2;255;255;255mSchildkr√∂te steuern[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m Benutze die Pfeiltasten, um die Schildkr√∂te zu drehen (die Tasten GVBR etc. benutzen einen[0m
[38;2;255;255;255m anderen Mechanismus, der die Schildkr√∂te steuert, der den Watchdog-Knoten umgeht)[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m Jetzt k√∂nnen Sie das aktuelle Verhalten des Systems mit [0m[38;2;236;53;51m`[0m[38;2;236;53;51mrqt[0m[38;2;236;53;51m`[0m[38;2;255;255;255m untersuchen[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m Wir schlagen zwei Plugins vor, die Sie aktivieren k√∂nnen: [0m[38;2;228;46;112m*[0m[38;2;228;46;112mintrospection - node graph[0m[38;2;228;46;112m*[0m[38;2;255;255;255m und[0m
[38;2;255;255;255m [0m[38;2;228;46;112m*[0m[38;2;228;46;112mtopics - topic monitor[0m[38;2;228;46;112m*[0m[38;2;255;255;255m.[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m Sie k√∂nnen sehen, dass der Teleop-Knoten die Schildkr√∂te direkt steuert - das ist nicht das, w[0m
[38;2;255;255;255mas wir wollen[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m Sie k√∂nnen die Ausgabe des Teleop-Knotens in das Eingabethema f√ºr das Thema des Watchdog-K[0m
[38;2;255;255;255mnotens umleiten: [0m[38;2;236;53;51m`[0m[38;2;236;53;51mros2 run turtlesim turtle_teleop_key --ros-args --remap turtle1/cmd_vel:=turtl[0m
[38;2;236;53;51me1/input_cmd[0m[38;2;236;53;51m`[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m √úberpr√ºfen Sie die √Ñnderungen im Knotengraphen (der Teleop-Knoten sollte nun seine Nachric[0m
[38;2;255;255;255mhten an das Thema "turtle1/input_cmd" senden, das vom Watchdog abonniert wurde)[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m Jetzt sollte sich die Schildkr√∂te r√ºckw√§rts bewegen[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m Wenn das Verhalten der Schildkr√∂te richtig ist, achten Sie auf den Controller-Knoten[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m Dieser Knoten ver√∂ffentlicht eine Start- und eine Stoppnachricht[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m √Ñndern Sie das Verhalten des Watchdogs so, dass sich die Schildkr√∂te nur drehen kann, bevo[0m
[38;2;255;255;255mr der Start-Befehl gesendet wird, und dass sie nach dem Stopp-Befehl vollst√§ndig anh√§lt[0m
[38;2;255;255;255m    [0m[38;2;119;119;119m-[0m[38;2;255;255;255m Um das gew√ºnschte Verhalten zu erreichen, m√ºssen Sie bestimmte Komponenten des Topics 'cmd[0m
[38;2;255;255;255m_vel' auf Null setzen[0m

[38;2;255;255;255m√úbersetzt mit [0m[4;38;2;166;226;46mwww.DeepL.com[0m[4;38;2;166;226;46m/Translator[0m[38;2;255;255;255m (kostenlose Version)[0m
[38;2;253;151;31m---[0m

[38;2;253;151;31m##[0m[38;2;253;151;31m [0m[38;2;253;151;31mAssignment 2: Reactive Behaviour[0m

[38;2;255;255;255mIn this assignment we want to program a reactive behaviour, that controls the robot by directly [0m
[38;2;255;255;255mcomputing actuator commands from the sensor input. The sensor input we use is the laser scanner [0m
[38;2;255;255;255mof the robot, which publishes to the [0m[38;2;236;53;51m`[0m[38;2;236;53;51mscan[0m[38;2;236;53;51m`[0m[38;2;255;255;255m topic. The velocity of the robot is controlled via t[0m
[38;2;255;255;255mhe [0m[38;2;236;53;51m`[0m[38;2;236;53;51mcmd_vel[0m[38;2;236;53;51m`[0m[38;2;255;255;255m topic.[0m

[38;2;119;119;119m-[0m[38;2;255;255;255m [0m[38;2;255;255;255mDownload the new code using git (you can either use a new branch for assigment 2, or merge the[0m
[38;2;255;255;255m upstream changes to your local copy of the workspace).[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m The new code is in a ros-package called [0m[38;2;236;53;51m`[0m[38;2;236;53;51mreactive_behaviour[0m[38;2;236;53;51m`[0m[38;2;255;255;255m, use [0m[38;2;236;53;51m`[0m[38;2;236;53;51mcolcon build[0m[38;2;236;53;51m`[0m[38;2;255;255;255m and start the[0m
[38;2;255;255;255m behaviour with [0m[38;2;236;53;51m`[0m[38;2;236;53;51mros2 launch reactive_behaviour robot.launch.py n_robots:=1[0m[38;2;236;53;51m`[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m You can modify the code within the file [0m[38;2;236;53;51m`[0m[38;2;236;53;51mcontroller.py[0m[38;2;236;53;51m`[0m[38;2;255;255;255m to change the behaviour of the robot[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m Explore as much of the reachable area as possible (think of a cleaning robot)[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m Don't crash ;)[0m

[38;2;253;151;31m###[0m[38;2;253;151;31m [0m[38;2;253;151;31mBenchmark[0m
[38;2;255;255;255mRun your behaviour and note the score after 240s (sim-time)[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m [0m[38;2;236;53;51m`[0m[38;2;236;53;51mros2 launch reactive_behaviour robot.launch.py n_robots:=1[0m[38;2;236;53;51m`[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m [0m[38;2;236;53;51m`[0m[38;2;236;53;51mros2 launch reactive_behaviour robot.launch.py n_robots:=1 simulator:=gzserver[0m[38;2;236;53;51m`[0m[38;2;255;255;255m # ohne 3D Sim[0m
[38;2;255;255;255mulation[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m [0m[38;2;236;53;51m`[0m[38;2;236;53;51mros2 launch reactive_behaviour swarmlab.launch.py n_robots:=1[0m[38;2;236;53;51m`[0m

[38;2;255;255;255mcolcon build --cmake-clean-cache[0m

[38;2;253;151;31m##[0m[38;2;253;151;31m [0m[38;2;253;151;31mAssignment 3: State Estimation[0m

[38;2;255;255;255mIn this assignment your task is to estimate the state of the robot. To achieve this goal, you wi[0m
[38;2;255;255;255mll follow a two step process:[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m [0m[38;2;255;255;255mCompute the robot postition (x, y, z) in the node [0m[38;2;236;53;51m`[0m[38;2;236;53;51mlocator.py[0m[38;2;236;53;51m`[0m[38;2;255;255;255m, based on range measurements (s[0m
[38;2;255;255;255mimilar to GPS)[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m Go to the position published in the topic [0m[38;2;236;53;51m`[0m[38;2;236;53;51mgoal[0m[38;2;236;53;51m`[0m[38;2;255;255;255m by publishing the correct [0m[38;2;236;53;51m`[0m[38;2;236;53;51mcmd_vel[0m[38;2;236;53;51m`[0m

[38;2;255;255;255mYou can start your code with the 'robot.launch.py' launch-file, just as you did in assignment 2.[0m

[38;2;119;119;119m-[0m[38;2;255;255;255m [0m[38;2;255;255;255mWe will measure the time to complete the third goal[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m As always: Don't crash[0m

[38;2;253;151;31m##[0m[38;2;253;151;31m [0m[38;2;253;151;31mAssignment 4: Planning[0m

[38;2;255;255;255mIn this assignment, you will be resposible for planning the future path of the robots. For this [0m
[38;2;255;255;255mplanning task, you will get goal and position information for the robot, as well as a version of[0m
[38;2;255;255;255m the map containing obstacle information.[0m
[38;2;255;255;255mAs the state-space, we will use the pose information (x, y, angle) for the robot.[0m

[38;2;255;255;255mYou can find out how the transition between two states is working, by creating a path between an[0m
[38;2;255;255;255my pair of poses with a vehicle model. The robot is able to follow the path created by the vehicl[0m
[38;2;255;255;255me model (with an unknown tracking error).[0m

[38;2;119;119;119m-[0m[38;2;255;255;255m [0m[38;2;255;255;255mInstall the dependencies with [0m[38;2;236;53;51m`[0m[38;2;236;53;51mpip install git+https://github.com/ovgu-FINken/polygonal_roadma[0m
[38;2;236;53;51mps tqdm[0m[38;2;236;53;51m`[0m[38;2;255;255;255m, update the driving_swarm_infrastructure[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m Start the behaviour using the [0m[38;2;236;53;51m`[0m[38;2;236;53;51mros2 launch planning robot.launch.py[0m[38;2;236;53;51m`[0m
[38;2;119;119;119m-[0m[38;2;255;255;255m We also provide a jupyter-notebook to check your code outside of ros2 (a visualization can hel[0m
[38;2;255;255;255mp to debug your code)[0m


[38;2;255;255;255mWe suggest that you use the Probabilistic Roadmap as a planning approach, but you can also use d[0m
[38;2;255;255;255mifferent approaches if you like.[0m

